{"ast":null,"code":"import { useEffect, useState } from 'react';\n\nconst useObserver = targetRef => {\n  const [isVisible, setIsVisible] = useState(false);\n  useEffect(() => {\n    const observer = new IntersectionObserver((entries, observer) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          if (!isVisible) {\n            setIsVisible(true);\n          }\n\n          observer.unobserve(entry.target);\n        } else {\n          setIsVisible(false);\n        }\n      });\n    });\n    const current = targetRef.current;\n    observer.observe(current);\n    return () => {\n      observer.unobserve(current);\n    };\n  }, [isVisible, targetRef]);\n  return [isVisible];\n};\n\nexport default useObserver;","map":{"version":3,"sources":["D:/raect_job_apply/src/custom-hooks/observer.js"],"names":["useEffect","useState","useObserver","targetRef","isVisible","setIsVisible","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","unobserve","target","current","observe"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,WAAW,GAAIC,SAAD,IAAe;AACjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB,CAACC,OAAD,EAAUF,QAAV,KAAuB;AAC/DE,MAAAA,OAAO,CAACC,OAAR,CAAiBC,KAAD,IAAW;AACzB,YAAIA,KAAK,CAACC,cAAV,EAA0B;AACxB,cAAI,CAACP,SAAL,EAAgB;AACdC,YAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AACDC,UAAAA,QAAQ,CAACM,SAAT,CAAmBF,KAAK,CAACG,MAAzB;AACD,SALD,MAKO;AACLR,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,OATD;AAUD,KAXgB,CAAjB;AAaA,UAAMS,OAAO,GAAGX,SAAS,CAACW,OAA1B;AACAR,IAAAA,QAAQ,CAACS,OAAT,CAAiBD,OAAjB;AAEA,WAAO,MAAM;AACXR,MAAAA,QAAQ,CAACM,SAAT,CAAmBE,OAAnB;AACD,KAFD;AAGD,GApBQ,EAoBN,CAACV,SAAD,EAAYD,SAAZ,CApBM,CAAT;AAsBA,SAAO,CAACC,SAAD,CAAP;AACD,CA1BD;;AA4BA,eAAeF,WAAf","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst useObserver = (targetRef) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver((entries, observer) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          if (!isVisible) {\n            setIsVisible(true);\n          }\n          observer.unobserve(entry.target);\n        } else {\n          setIsVisible(false);\n        }\n      });\n    });\n\n    const current = targetRef.current;\n    observer.observe(current);\n\n    return () => {\n      observer.unobserve(current);\n    };\n  }, [isVisible, targetRef]);\n\n  return [isVisible];\n};\n\nexport default useObserver;\n"]},"metadata":{},"sourceType":"module"}